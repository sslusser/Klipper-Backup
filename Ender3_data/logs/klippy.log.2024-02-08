===== Config file =====
[virtual_sdcard]
path = /home/scott/Ender3_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
	{% set allow_park = client.park_at_cancel | default(false) | lower == 'true' %}
	{% set retract = client.cancel_retract | default(5.0) | abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x | length > 0 or park_y | length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro | default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
	{% set idle_timeout = client.idle_timeout | default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE | default(1) | int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro | default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move | default(velocity) %}
	{% set runout_resume = True if client.runout_sensor | default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro | default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1)|int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos | default(false) | lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x | default(0.0) %}
	{% set custom_park_y  = client.custom_park_y | default(0.0) %}
	{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}
	{% set sp_hop         = client.speed_hop | default(15) * 60 %}
	{% set sp_move        = client.speed_move | default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN | default(0) | float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
	{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}
	{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed | float | abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
	{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}
	{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}

[mcu]
serial = /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
restart_method = command

[stepper_x]
step_pin = PC2
dir_pin = PB9
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = ^PA5
position_endstop = 2
position_max = 253
homing_speed = 50

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = ^PA6
position_endstop = -6
position_max = 236
position_min = -6
homing_speed = 50

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_max = 243
position_min = -6.0
position_endstop = -0.000

[extruder]
max_extrude_only_distance = 200.0
step_pin = PB4
dir_pin = PB3
enable_pin = !PC3
microsteps = 16
rotation_distance = 24.643
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
min_temp = 0
max_temp = 250
control = pid
pid_kp = 30.120
pid_ki = 1.969
pid_kd = 115.208

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 130
control = pid
pid_kp = 70.063
pid_ki = 1.382
pid_kd = 888.052

[fan]
pin = PA0

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 3000
max_z_velocity = 5
max_z_accel = 100

[bltouch]
sensor_pin = ^PB1
control_pin = PB0
x_offset = -45
y_offset = -5
samples = 2
speed = 2
z_offset = 3.544

[safe_z_home]
home_xy_position = 125, 125
speed = 50
z_hop = 10
z_hop_speed = 5

[bed_mesh]
speed = 80
horizontal_move_z = 5
mesh_min = 8, 15
mesh_max = 208, 230
probe_count = 5,5
mesh_pps = 2,2
fade_start = 1
fade_end = 10
fade_target = 0

[bed_screws]
screw1 = 40, 30
screw2 = 200, 30
screw3 = 200, 200
screw4 = 40, 200

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[gcode_macro START_PRINT]
gcode = 
	{% set BED_TEMP = params.BED_TEMP|default(60)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
	
	M140 S{BED_TEMP}
	
	G90
	
	
	
	SET_GCODE_OFFSET Z=0.0
	
	G28
	BED_MESH_PROFILE LOAD=default
	
	G1 Z5 F3000
	
	G1 Z0.15 F300
	
	M190 S{BED_TEMP}
	
	M109 S{EXTRUDER_TEMP}

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	G91
	G1 X-2 Y-2 E-3 F300
	
	G1 Z20 F3000
	G90
	G1 X125 Y210 F2000
	
	M84

[screws_tilt_adjust]
screw1 = 74, 42
screw1_name = Front left
screw2 = 245, 42
screw2_name = Front right
screw3 = 245, 213
screw3_name = Back right
screw4 = 74, 213
screw4_name = Back left
screw_thread = CW-M4
horizontal_move_z = 10

[bed_mesh default]
version = 1
points = 
	0.113750, 0.070000, 0.078750, 0.063750, -0.028750
	0.133750, 0.078750, 0.092500, 0.062500, -0.012500
	0.076250, 0.053750, 0.073750, 0.033750, -0.056250
	0.060000, 0.020000, 0.016250, -0.021250, -0.120000
	-0.057500, -0.103750, -0.115000, -0.133750, -0.192500
tension = 0.2
min_x = 8.0
algo = lagrange
y_count = 5
mesh_y_pps = 2
min_y = 15.0
x_count = 5
max_y = 230.0
mesh_x_pps = 2
max_x = 208.0
=======================
Args: ['/home/scott/klipper/klippy/klippy.py', '/home/scott/Ender3_data/config/printer.cfg', '-I', '/home/scott/Ender3_data/comms/klippy.serial', '-l', '/home/scott/Ender3_data/logs/klippy.log', '-a', '/home/scott/Ender3_data/comms/klippy.sock']
Git version: 'v0.12.0-102-g9f41f53c'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core Intel(R) Core(TM) i3-4130 CPU @ 3.40GHz
Python: '3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0]'
=============== Log rollover at Thu Feb  8 22:10:47 2024 ===============
webhooks client 140462113380128: Disconnected
webhooks client 140462124270304: New connection
webhooks client 140462124270304: Client info {'program': 'Moonraker', 'version': 'v0.8.0-310-g67c98f6'}
Starting Klippy...
Args: ['/home/scott/klipper/klippy/klippy.py', '/home/scott/Ender3_data/config/printer.cfg', '-I', '/home/scott/Ender3_data/comms/klippy.serial', '-l', '/home/scott/Ender3_data/logs/klippy.log', '-a', '/home/scott/Ender3_data/comms/klippy.sock']
Git version: 'v0.12.0-102-g9f41f53c'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core Intel(R) Core(TM) i3-4130 CPU @ 3.40GHz
Python: '3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0]'
Start printer at Thu Feb  8 22:32:11 2024 (1707449531.4 11.1)
Unable to open config file /home/scott/Ender3_data/config/moonraker_obico_macros.cfg
Traceback (most recent call last):
  File "/home/scott/klipper/klippy/configfile.py", line 158, in _read_config_file
    f = open(filename, 'r')
FileNotFoundError: [Errno 2] No such file or directory: '/home/scott/Ender3_data/config/moonraker_obico_macros.cfg'
Config error
Traceback (most recent call last):
  File "/home/scott/klipper/klippy/configfile.py", line 158, in _read_config_file
    f = open(filename, 'r')
FileNotFoundError: [Errno 2] No such file or directory: '/home/scott/Ender3_data/config/moonraker_obico_macros.cfg'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/scott/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/scott/klipper/klippy/klippy.py", line 134, in _read_config
    config = pconfig.read_main_config()
  File "/home/scott/klipper/klippy/configfile.py", line 284, in read_main_config
    regular_config = self._build_config_wrapper(regular_data, filename)
  File "/home/scott/klipper/klippy/configfile.py", line 271, in _build_config_wrapper
    self._parse_config(data, filename, fileconfig, set())
  File "/home/scott/klipper/klippy/configfile.py", line 259, in _parse_config
    self._resolve_include(filename, include_spec, fileconfig,
  File "/home/scott/klipper/klippy/configfile.py", line 235, in _resolve_include
    include_data = self._read_config_file(include_filename)
  File "/home/scott/klipper/klippy/configfile.py", line 164, in _read_config_file
    raise error(msg)
configparser.Error: Unable to open config file /home/scott/Ender3_data/config/moonraker_obico_macros.cfg
webhooks client 139789434874576: New connection
webhooks client 139789434874576: Client info {'program': 'Moonraker', 'version': 'v0.8.0-310-g67c98f6'}
Starting Klippy...
Args: ['/home/scott/klipper/klippy/klippy.py', '/home/scott/Ender3_data/config/printer.cfg', '-I', '/home/scott/Ender3_data/comms/klippy.serial', '-l', '/home/scott/Ender3_data/logs/klippy.log', '-a', '/home/scott/Ender3_data/comms/klippy.sock']
Git version: 'v0.12.0-102-g9f41f53c'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core Intel(R) Core(TM) i3-4130 CPU @ 3.40GHz
Python: '3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0]'
Start printer at Thu Feb  8 22:58:33 2024 (1707451113.5 11.2)
Unable to open config file /home/scott/Ender3_data/config/moonraker_obico_macros.cfg
Traceback (most recent call last):
  File "/home/scott/klipper/klippy/configfile.py", line 158, in _read_config_file
    f = open(filename, 'r')
FileNotFoundError: [Errno 2] No such file or directory: '/home/scott/Ender3_data/config/moonraker_obico_macros.cfg'
Config error
Traceback (most recent call last):
  File "/home/scott/klipper/klippy/configfile.py", line 158, in _read_config_file
    f = open(filename, 'r')
FileNotFoundError: [Errno 2] No such file or directory: '/home/scott/Ender3_data/config/moonraker_obico_macros.cfg'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/scott/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/scott/klipper/klippy/klippy.py", line 134, in _read_config
    config = pconfig.read_main_config()
  File "/home/scott/klipper/klippy/configfile.py", line 284, in read_main_config
    regular_config = self._build_config_wrapper(regular_data, filename)
  File "/home/scott/klipper/klippy/configfile.py", line 271, in _build_config_wrapper
    self._parse_config(data, filename, fileconfig, set())
  File "/home/scott/klipper/klippy/configfile.py", line 259, in _parse_config
    self._resolve_include(filename, include_spec, fileconfig,
  File "/home/scott/klipper/klippy/configfile.py", line 235, in _resolve_include
    include_data = self._read_config_file(include_filename)
  File "/home/scott/klipper/klippy/configfile.py", line 164, in _read_config_file
    raise error(msg)
configparser.Error: Unable to open config file /home/scott/Ender3_data/config/moonraker_obico_macros.cfg
webhooks client 140025369671712: New connection
webhooks client 140025369671712: Client info {'program': 'Moonraker', 'version': 'v0.8.0-310-g67c98f6'}
webhooks client 140025369671712: Disconnected
webhooks client 140025369670464: New connection
webhooks client 140025369670464: Client info {'program': 'Moonraker', 'version': 'v0.8.0-310-g67c98f6'}
webhooks client 140025369670464: Disconnected
Restarting printer
Start printer at Thu Feb  8 23:27:34 2024 (1707452854.4 1752.5)
===== Config file =====
[virtual_sdcard]
path = /home/scott/Ender3_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
	{% set allow_park = client.park_at_cancel | default(false) | lower == 'true' %}
	{% set retract = client.cancel_retract | default(5.0) | abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x | default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y | default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x | length > 0 or park_y | length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro | default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
	{% set idle_timeout = client.idle_timeout | default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE | default(1) | int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro | default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move | default(velocity) %}
	{% set runout_resume = True if client.runout_sensor | default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro | default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1)|int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos | default(false) | lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x | default(0.0) %}
	{% set custom_park_y  = client.custom_park_y | default(0.0) %}
	{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}
	{% set sp_hop         = client.speed_hop | default(15) * 60 %}
	{% set sp_move        = client.speed_move | default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN | default(0) | float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
	{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}
	{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed | float | abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
	{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}
	{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}

[mcu]
serial = /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
restart_method = command

[stepper_x]
step_pin = PC2
dir_pin = PB9
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = ^PA5
position_endstop = 2
position_max = 253
homing_speed = 50

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = ^PA6
position_endstop = -6
position_max = 236
position_min = -6
homing_speed = 50

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_max = 243
position_min = -6.0
position_endstop = -0.000

[extruder]
max_extrude_only_distance = 200.0
step_pin = PB4
dir_pin = PB3
enable_pin = !PC3
microsteps = 16
rotation_distance = 24.643
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
min_temp = 0
max_temp = 250
control = pid
pid_kp = 30.120
pid_ki = 1.969
pid_kd = 115.208

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 130
control = pid
pid_kp = 70.063
pid_ki = 1.382
pid_kd = 888.052

[fan]
pin = PA0

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 3000
max_z_velocity = 5
max_z_accel = 100

[bltouch]
sensor_pin = ^PB1
control_pin = PB0
x_offset = -45
y_offset = -5
samples = 2
speed = 2
z_offset = 3.544

[safe_z_home]
home_xy_position = 125, 125
speed = 50
z_hop = 10
z_hop_speed = 5

[bed_mesh]
speed = 80
horizontal_move_z = 5
mesh_min = 8, 15
mesh_max = 208, 230
probe_count = 5,5
mesh_pps = 2,2
fade_start = 1
fade_end = 10
fade_target = 0

[bed_screws]
screw1 = 40, 30
screw2 = 200, 30
screw3 = 200, 200
screw4 = 40, 200

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[gcode_macro START_PRINT]
gcode = 
	{% set BED_TEMP = params.BED_TEMP|default(60)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
	
	M140 S{BED_TEMP}
	
	G90
	
	
	
	SET_GCODE_OFFSET Z=0.0
	
	G28
	BED_MESH_PROFILE LOAD=default
	
	G1 Z5 F3000
	
	G1 Z0.15 F300
	
	M190 S{BED_TEMP}
	
	M109 S{EXTRUDER_TEMP}

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	G91
	G1 X-2 Y-2 E-3 F300
	
	G1 Z20 F3000
	G90
	G1 X125 Y210 F2000
	
	M84

[screws_tilt_adjust]
screw1 = 74, 42
screw1_name = Front left
screw2 = 245, 42
screw2_name = Front right
screw3 = 245, 213
screw3_name = Back right
screw4 = 74, 213
screw4_name = Back left
screw_thread = CW-M4
horizontal_move_z = 10

[bed_mesh default]
version = 1
points = 
	0.113750, 0.070000, 0.078750, 0.063750, -0.028750
	0.133750, 0.078750, 0.092500, 0.062500, -0.012500
	0.076250, 0.053750, 0.073750, 0.033750, -0.056250
	0.060000, 0.020000, 0.016250, -0.021250, -0.120000
	-0.057500, -0.103750, -0.115000, -0.133750, -0.192500
tension = 0.2
min_x = 8.0
algo = lagrange
y_count = 5
mesh_y_pps = 2
min_y = 15.0
x_count = 5
max_y = 230.0
mesh_x_pps = 2
max_x = 208.0
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 11] Could not exclusively lock port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 11] Resource temporarily unavailable
webhooks client 140025360059168: New connection
webhooks client 140025360059168: Client info {'program': 'Moonraker', 'version': 'v0.8.0-310-g67c98f6'}
mcu 'mcu': Unable to open serial port: [Errno 11] Could not exclusively lock port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 11] Resource temporarily unavailable
mcu 'mcu': Unable to open serial port: [Errno 11] Could not exclusively lock port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 11] Resource temporarily unavailable
mcu 'mcu': Unable to open serial port: [Errno 11] Could not exclusively lock port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 11] Resource temporarily unavailable
mcu 'mcu': Unable to open serial port: [Errno 11] Could not exclusively lock port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 11] Resource temporarily unavailable
mcu 'mcu': Unable to open serial port: [Errno 11] Could not exclusively lock port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 11] Resource temporarily unavailable
mcu 'mcu': Unable to open serial port: [Errno 11] Could not exclusively lock port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 11] Resource temporarily unavailable
mcu 'mcu': Unable to open serial port: [Errno 11] Could not exclusively lock port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 11] Resource temporarily unavailable
mcu 'mcu': Unable to open serial port: [Errno 11] Could not exclusively lock port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 11] Resource temporarily unavailable
mcu 'mcu': Unable to open serial port: [Errno 11] Could not exclusively lock port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 11] Resource temporarily unavailable
mcu 'mcu': Unable to open serial port: [Errno 11] Could not exclusively lock port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 11] Resource temporarily unavailable
mcu 'mcu': Unable to open serial port: [Errno 11] Could not exclusively lock port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 11] Resource temporarily unavailable
mcu 'mcu': Unable to open serial port: [Errno 11] Could not exclusively lock port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 11] Resource temporarily unavailable
mcu 'mcu': Unable to open serial port: [Errno 11] Could not exclusively lock port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 11] Resource temporarily unavailable
mcu 'mcu': Unable to open serial port: [Errno 11] Could not exclusively lock port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 11] Resource temporarily unavailable
mcu 'mcu': Unable to open serial port: [Errno 11] Could not exclusively lock port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 11] Resource temporarily unavailable
mcu 'mcu': Unable to open serial port: [Errno 11] Could not exclusively lock port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 11] Resource temporarily unavailable
mcu 'mcu': Unable to open serial port: [Errno 11] Could not exclusively lock port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 11] Resource temporarily unavailable
MCU error during connect
Traceback (most recent call last):
  File "/home/scott/klipper/klippy/mcu.py", line 768, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/scott/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/scott/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/scott/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/scott/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/scott/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/scott/klipper/klippy/mcu.py", line 773, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/scott/klipper/klippy/../.config(1557): Thu Dec 21 15:59:57 2023
========= Last MCU build config =========
CONFIG_LOW_LEVEL_OPTIONS=y
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
# CONFIG_MACH_STM32 is not set
CONFIG_MACH_HC32F460=y
# CONFIG_MACH_RP2040 is not set
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_AR100 is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="hc32f460"
CONFIG_MCU="HC32F460"
CONFIG_CLOCK_FREQ=168000000
CONFIG_SERIAL=y
CONFIG_FLASH_SIZE=0x40000
CONFIG_FLASH_BOOT_ADDRESS=0x0
CONFIG_RAM_START=0x1fff8000
CONFIG_RAM_SIZE=0x8000
CONFIG_STACK_SIZE=1024
CONFIG_FLASH_APPLICATION_ADDRESS=0x008000
CONFIG_HC32F460_SELECT=y
# CONFIG_HC32F460_SERIAL_PA7_PA8 is not set
# CONFIG_HC32F460_SERIAL_PA13_PA14 is not set
CONFIG_HC32F460_SERIAL_PA3_PA2=y
# CONFIG_HC32F460_SERIAL_PH2_PB10 is not set
# CONFIG_HC32F460_SERIAL_PA15_PA9 is not set
# CONFIG_HC32F460_SERIAL_PC0_PC1 is not set
CONFIG_HC32F460_FLASH_APPLICATION_ADDRESS_0x008000=y
# CONFIG_HC32F460_FLASH_APPLICATION_ADDRESS_0x00C000 is not set
# CONFIG_HC32F460_FLASH_APPLICATION_ADDRESS_0x010000 is not set
CONFIG_HC32F460_CLOCK_SPEED_168M=y
# CONFIG_HC32F460_CLOCK_SPEED_200M is not set
CONFIG_SERIAL_BAUD=250000
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_WANT_GPIO_BITBANGING=y
CONFIG_WANT_DISPLAYS=y
CONFIG_CANBUS_FREQUENCY=1000000
CONFIG_INITIAL_PINS=""
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/scott/klipper/klippy/../out/klipper.dict(4928): Thu Dec 21 16:00:06 2023
Last MCU build version: v0.12.0-37-g547bfbf8
Last MCU build tools: gcc: (15:10.3-2021.07-4) 10.3.1 20210621 (release) binutils: (2.38-3ubuntu1+15build1) 2.38
Last MCU build config: ADC_MAX=4095 CLOCK_FREQ=168000000 MCU=HC32F460 PWM_MAX=65535 RECEIVE_WINDOW=192 RESERVE_PINS_serial=PA3,PA2 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/scott/klipper/klippy/../out/klipper.elf(2183752): Thu Dec 21 16:00:07 2023
